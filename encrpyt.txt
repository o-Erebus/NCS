#include <iostream>
using namespace std;

// Function to repeat the keyword to match plaintext length
string generateKey(string plaintext, string key) {
    int keyLength = key.size();
    int textLength = plaintext.size();
    string newKey = key;

    for (int i = 0; i < textLength - keyLength; i++) {
        newKey += key[i % keyLength];
    }

    return newKey;
}

// Function to encrypt the plaintext using VigenÃ¨re Cipher
string encrypt(string plaintext, string key) {
    string ciphertext = "";

    for (int i = 0; i < plaintext.size(); i++) {
        char p = plaintext[i];
        char k = key[i];

        // Convert to 0-25 range and encrypt
        char c = ((p - 'A') + (k - 'A')) % 26 + 'A';
        ciphertext += c;
    }

    return ciphertext;
}

// Function to decrypt the ciphertext
string decrypt(string ciphertext, string key) {
    string originalText = "";

    for (int i = 0; i < ciphertext.size(); i++) {
        char c = ciphertext[i];
        char k = key[i];

        // Decryption logic
        char p = ((c - 'A') - (k - 'A') + 26) % 26 + 'A';
        originalText += p;
    }

    return originalText;
}

int main() {
    string plaintext = "HELLOVIGENERE";
    string keyword = "KEY";

    // Generate repeated key
    string key = generateKey(plaintext, keyword);

    // Encrypt
    string ciphertext = encrypt(plaintext, key);
    cout << "Ciphertext: " << ciphertext << endl;

    // Decrypt
    string decryptedText = decrypt(ciphertext, key);
    cout << "Decrypted Plaintext: " << decryptedText << endl;

    return 0;
}
